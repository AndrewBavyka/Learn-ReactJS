Пример:
Если мы поменяем корневой тег у элемента то React перертсроит полностью дом дерерво.
Если меняется родитель то для безопасности самого приложение проще перестроить все внутри

Если мв нашем корневом элементе меняется не тип нашего тега (не тип элемента), но меняются лишь какие то атрибуты
(т.е пропсы или атрибуты классов и т.д) - то React будет обновлять изменившийся элемент

Как работает внутри:
React сохраняет копию предыдущего дерева элементов и компнентов но при этом сохраняет новое дерево которое должно быть постороено
(Все это происходит в Виртуал дом дереве)
Если React найдет отличия то изменненые элементы будут создавать мутацию (перерисовку элмента в реальном дом дереве)
Простыми словами: React изменит в реальном дом дереве только те элементы, которые действительно изменились

Зачем этот алгоритм вообще нужен?
Для оптимизации скорости работы приложения

Вывод:
1) React обновляет в интерфейсе, только те элементы, которые действительно изменились.
2) В этом ему помогает алгоритм согласование (Reconcilation) которые сравнивает старые и новые копии DOM-дерева.
3) При работе со списком одинаковых сущностей использовать атрибут "key" для правильно работы алгоритма и 
значительного ускорения работы приложения.